// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`EntityGenerator generate entities from schema [mysql]: mysql-entity-dump 1`] = `
Array [
  "import { Cascade, Entity, OneToOne, Property } from 'mikro-orm';
import { Author2 } from './Author2';

@Entity()
export class Address2 {

  @OneToOne({ entity: () => Author2, cascade: [Cascade.ALL], primary: true, index: 'address2_author_id_index', unique: 'address2_author_id_unique' })
  author!: Author2;

  @Property({ length: 255 })
  value!: string;

}
",
  "import { Cascade, Entity, Index, ManyToOne, PrimaryKey, Property, Unique } from 'mikro-orm';
import { Book2 } from './Book2';

@Entity()
@Index({ name: 'author2_name_age_index', properties: ['name', 'age'] })
@Unique({ name: 'author2_name_email_unique', properties: ['name', 'email'] })
export class Author2 {

  @PrimaryKey()
  id!: number;

  @Property({ length: 3, default: \`current_timestamp(3)\` })
  createdAt!: Date;

  @Property({ length: 3, default: \`current_timestamp(3)\` })
  updatedAt!: Date;

  @Index({ name: 'custom_idx_name_123' })
  @Property({ length: 255 })
  name!: string;

  @Index({ name: 'custom_email_index_name' })
  @Unique({ name: 'custom_email_unique_name' })
  @Property({ length: 255 })
  email!: string;

  @Property({ nullable: true })
  age?: number;

  @Index({ name: 'author2_terms_accepted_index' })
  @Property()
  termsAccepted: boolean = true;

  @Property({ nullable: true })
  optional?: boolean;

  @Property({ columnType: 'text', length: 65535, nullable: true })
  identities?: string;

  @Index({ name: 'author2_born_index' })
  @Property({ columnType: 'date', nullable: true })
  born?: string;

  @Index({ name: 'born_time_idx' })
  @Property({ columnType: 'time', nullable: true })
  bornTime?: string;

  @ManyToOne({ entity: () => Book2, cascade: [Cascade.MERGE, Cascade.REMOVE], nullable: true, index: 'author2_favourite_book_uuid_pk_index' })
  favouriteBook?: Book2;

  @ManyToOne({ entity: () => Author2, nullable: true, index: 'author2_favourite_author_id_index' })
  favouriteAuthor?: Author2;

}
",
  "import { Cascade, Entity, ManyToOne } from 'mikro-orm';
import { Author2 } from './Author2';

@Entity()
export class Author2Following {

  @ManyToOne({ entity: () => Author2, fieldName: 'author2_1_id', cascade: [Cascade.ALL], primary: true, index: 'author2_following_author2_1_id_index' })
  author21!: Author2;

  @ManyToOne({ entity: () => Author2, fieldName: 'author2_2_id', cascade: [Cascade.ALL], primary: true, index: 'author2_following_author2_2_id_index' })
  author22!: Author2;

}
",
  "import { Cascade, Entity, ManyToOne } from 'mikro-orm';
import { Author2 } from './Author2';

@Entity()
export class AuthorToFriend {

  @ManyToOne({ entity: () => Author2, fieldName: 'author2_1_id', cascade: [Cascade.ALL], primary: true, index: 'author_to_friend_author2_1_id_index' })
  author21!: Author2;

  @ManyToOne({ entity: () => Author2, fieldName: 'author2_2_id', cascade: [Cascade.ALL], primary: true, index: 'author_to_friend_author2_2_id_index' })
  author22!: Author2;

}
",
  "import { Entity, Index, ManyToOne, OneToOne, PrimaryKey, Property } from 'mikro-orm';

@Entity()
export class BaseUser2 {

  @PrimaryKey()
  id!: number;

  @Property({ length: 100 })
  firstName!: string;

  @Property({ length: 100 })
  lastName!: string;

  @Index({ name: 'base_user2_type_index' })
  @Property({ columnType: 'enum' })
  type!: string;

  @Property({ nullable: true })
  employeeProp?: number;

  @Property({ length: 255, nullable: true })
  managerProp?: string;

  @Property({ length: 255, nullable: true })
  ownerProp?: string;

  @ManyToOne({ entity: () => BaseUser2, nullable: true, index: 'base_user2_favourite_employee_id_index' })
  favouriteEmployee?: BaseUser2;

  @OneToOne({ entity: () => BaseUser2, nullable: true, index: 'base_user2_favourite_manager_id_index', unique: 'base_user2_favourite_manager_id_unique' })
  favouriteManager?: BaseUser2;

}
",
  "import { Cascade, Entity, ManyToOne, PrimaryKey, Property } from 'mikro-orm';
import { Author2 } from './Author2';
import { Publisher2 } from './Publisher2';

@Entity()
export class Book2 {

  @PrimaryKey({ length: 36 })
  uuidPk!: string;

  @Property({ length: 3, default: \`current_timestamp(3)\` })
  createdAt!: Date;

  @Property({ length: 255, nullable: true })
  title?: string;

  @Property({ columnType: 'text', length: 65535, nullable: true })
  perex?: string;

  @Property({ columnType: 'float', nullable: true })
  price?: number;

  @Property({ columnType: 'double', nullable: true })
  double?: number;

  @Property({ nullable: true })
  meta?: object;

  @ManyToOne({ entity: () => Author2, cascade: [Cascade.MERGE], index: 'book2_author_id_index' })
  author!: Author2;

  @ManyToOne({ entity: () => Publisher2, cascade: [Cascade.ALL], nullable: true, index: 'book2_publisher_id_index' })
  publisher?: Publisher2;

  @Property({ length: 255, nullable: true })
  foo?: string;

}
",
  "import { Cascade, Entity, ManyToOne, PrimaryKey } from 'mikro-orm';
import { Book2 } from './Book2';
import { BookTag2 } from './BookTag2';

@Entity()
export class Book2Tags {

  @PrimaryKey()
  order!: number;

  @ManyToOne({ entity: () => Book2, cascade: [Cascade.ALL], index: 'book2_tags_book2_uuid_pk_index' })
  book2!: Book2;

  @ManyToOne({ entity: () => BookTag2, cascade: [Cascade.ALL], index: 'book2_tags_book_tag2_id_index' })
  bookTag2!: BookTag2;

}
",
  "import { Entity, PrimaryKey, Property } from 'mikro-orm';

@Entity()
export class BookTag2 {

  @PrimaryKey({ columnType: 'bigint' })
  id!: string;

  @Property({ length: 50 })
  name!: string;

}
",
  "import { Cascade, Entity, ManyToOne } from 'mikro-orm';
import { Book2 } from './Book2';
import { BookTag2 } from './BookTag2';

@Entity()
export class BookToTagUnordered {

  @ManyToOne({ entity: () => Book2, cascade: [Cascade.ALL], primary: true, index: 'book_to_tag_unordered_book2_uuid_pk_index' })
  book2!: Book2;

  @ManyToOne({ entity: () => BookTag2, cascade: [Cascade.ALL], primary: true, index: 'book_to_tag_unordered_book_tag2_id_index' })
  bookTag2!: BookTag2;

}
",
  "import { Entity, Index, PrimaryKey, Property } from 'mikro-orm';

@Entity()
export class Car2 {

  @Index({ name: 'car2_name_index' })
  @PrimaryKey({ length: 100 })
  name!: string;

  @Index({ name: 'car2_year_index' })
  @PrimaryKey()
  year!: number;

  @Property()
  price!: number;

}
",
  "import { Entity, ManyToOne, PrimaryKey, Property } from 'mikro-orm';
import { Car2 } from './Car2';

@Entity()
export class CarOwner2 {

  @PrimaryKey()
  id!: number;

  @Property({ length: 255 })
  name!: string;

  @ManyToOne({ entity: () => Car2, index: 'car_owner2_car_name_car_year_index' })
  car!: Car2;

}
",
  "import { Entity, Index, ManyToOne, PrimaryKey, Property } from 'mikro-orm';
import { Test2 } from './Test2';

@Entity()
export class Configuration2 {

  @Index({ name: 'configuration2_property_index' })
  @PrimaryKey({ length: 255 })
  property!: string;

  @ManyToOne({ entity: () => Test2, primary: true, index: 'configuration2_test_id_index' })
  test!: Test2;

  @Property({ length: 255 })
  value!: string;

}
",
  "import { Entity, OneToOne, PrimaryKey, Property } from 'mikro-orm';
import { FooBaz2 } from './FooBaz2';

@Entity()
export class FooBar2 {

  @PrimaryKey()
  id!: number;

  @Property({ length: 255 })
  name!: string;

  @OneToOne({ entity: () => FooBaz2, nullable: true, index: 'foo_bar2_baz_id_index', unique: 'foo_bar2_baz_id_unique' })
  baz?: FooBaz2;

  @OneToOne({ entity: () => FooBar2, nullable: true, index: 'foo_bar2_foo_bar_id_index', unique: 'foo_bar2_foo_bar_id_unique' })
  fooBar?: FooBar2;

  @Property({ default: \`CURRENT_TIMESTAMP\` })
  version!: Date;

  @Property({ length: 65535, columnType: 'blob', nullable: true })
  blob?: string;

  @Property({ columnType: 'text', length: 65535, nullable: true })
  array?: string;

  @Property({ nullable: true })
  object?: object;

}
",
  "import { Entity, PrimaryKey, Property } from 'mikro-orm';

@Entity()
export class FooBaz2 {

  @PrimaryKey()
  id!: number;

  @Property({ length: 255 })
  name!: string;

  @Property({ length: 3, default: \`current_timestamp(3)\` })
  version!: Date;

}
",
  "import { Entity, ManyToOne, Property } from 'mikro-orm';
import { FooBar2 } from './FooBar2';
import { FooBaz2 } from './FooBaz2';

@Entity()
export class FooParam2 {

  @ManyToOne({ entity: () => FooBar2, primary: true, index: 'foo_param2_bar_id_index' })
  bar!: FooBar2;

  @ManyToOne({ entity: () => FooBaz2, primary: true, index: 'foo_param2_baz_id_index' })
  baz!: FooBaz2;

  @Property({ length: 255 })
  value!: string;

}
",
  "import { Entity, PrimaryKey, Property } from 'mikro-orm';

@Entity()
export class Publisher2 {

  @PrimaryKey()
  id!: number;

  @Property({ length: 255 })
  name!: string;

  @Property({ columnType: 'enum' })
  type!: string;

  @Property({ columnType: 'enum' })
  type2!: string;

  @Property({ nullable: true })
  enum1?: boolean;

  @Property({ nullable: true })
  enum2?: boolean;

  @Property({ nullable: true })
  enum3?: boolean;

  @Property({ columnType: 'enum', nullable: true })
  enum4?: string;

}
",
  "import { Cascade, Entity, ManyToOne, PrimaryKey } from 'mikro-orm';
import { Publisher2 } from './Publisher2';
import { Test2 } from './Test2';

@Entity()
export class Publisher2Tests {

  @PrimaryKey()
  id!: number;

  @ManyToOne({ entity: () => Publisher2, cascade: [Cascade.ALL], index: 'publisher2_tests_publisher2_id_index' })
  publisher2!: Publisher2;

  @ManyToOne({ entity: () => Test2, cascade: [Cascade.ALL], index: 'publisher2_tests_test2_id_index' })
  test2!: Test2;

}
",
  "import { Entity, PrimaryKey, Property } from 'mikro-orm';

@Entity()
export class Sandwich {

  @PrimaryKey()
  id!: number;

  @Property({ length: 255 })
  name!: string;

  @Property()
  price!: number;

}
",
  "import { Cascade, Entity, OneToOne, PrimaryKey, Property } from 'mikro-orm';
import { Book2 } from './Book2';
import { FooBar2 } from './FooBar2';

@Entity()
export class Test2 {

  @PrimaryKey()
  id!: number;

  @Property({ length: 255, nullable: true })
  name?: string;

  @OneToOne({ entity: () => Book2, cascade: [Cascade.MERGE], nullable: true, index: 'test2_book_uuid_pk_index', unique: 'test2_book_uuid_pk_unique' })
  book?: Book2;

  @Property()
  version: number = 1;

  @OneToOne({ entity: () => FooBar2, fieldName: 'foo___bar', nullable: true, index: 'test2_foo___bar_index', unique: 'test2_foo___bar_unique' })
  fooBar?: FooBar2;

  @Property({ fieldName: 'foo___baz', nullable: true })
  fooBaz?: number;

}
",
  "import { Entity, Index, OneToOne, PrimaryKey, Property } from 'mikro-orm';
import { Car2 } from './Car2';

@Entity()
export class User2 {

  @Index({ name: 'user2_first_name_index' })
  @PrimaryKey({ length: 100 })
  firstName!: string;

  @Index({ name: 'user2_last_name_index' })
  @PrimaryKey({ length: 100 })
  lastName!: string;

  @Property({ nullable: true })
  foo?: number;

  @OneToOne({ entity: () => Car2, nullable: true, index: 'user2_favourite_car_name_favourite_car_year_index', unique: 'user2_favourite_car_year_unique' })
  favouriteCar?: Car2;

}
",
  "import { Cascade, Entity, ManyToOne } from 'mikro-orm';
import { Car2 } from './Car2';
import { User2 } from './User2';

@Entity()
export class User2Cars {

  @ManyToOne({ entity: () => User2, cascade: [Cascade.ALL], primary: true, index: 'user2_cars_user2_first_name_user2_last_name_index' })
  user2!: User2;

  @ManyToOne({ entity: () => Car2, cascade: [Cascade.ALL], primary: true, index: 'user2_cars_car2_name_car2_year_index' })
  car2!: Car2;

}
",
  "import { Cascade, Entity, ManyToOne } from 'mikro-orm';
import { Sandwich } from './Sandwich';
import { User2 } from './User2';

@Entity()
export class User2Sandwiches {

  @ManyToOne({ entity: () => User2, cascade: [Cascade.ALL], primary: true, index: 'user2_sandwiches_user2_first_name_user2_last_name_index' })
  user2!: User2;

  @ManyToOne({ entity: () => Sandwich, cascade: [Cascade.ALL], primary: true, index: 'user2_sandwiches_sandwich_id_index' })
  sandwich!: Sandwich;

}
",
]
`;

exports[`EntityGenerator generate entities from schema [postgres]: postgres-entity-dump 1`] = `
Array [
  "import { Cascade, Entity, OneToOne, Property } from 'mikro-orm';
import { Author2 } from './Author2';

@Entity()
export class Address2 {

  @OneToOne({ entity: () => Author2, cascade: [Cascade.ALL], primary: true, unique: 'address2_author_id_unique' })
  author!: Author2;

  @Property({ length: 255 })
  value!: string;

}
",
  "import { Cascade, Entity, Index, ManyToOne, PrimaryKey, Property, Unique } from 'mikro-orm';
import { Book2 } from './Book2';

@Entity()
@Index({ name: 'author2_name_age_index', properties: ['name', 'age'] })
@Unique({ name: 'author2_name_email_unique', properties: ['name', 'email'] })
export class Author2 {

  @PrimaryKey()
  id!: number;

  @Property({ length: 3, default: \`current_timestamp(3)\` })
  createdAt!: Date;

  @Property({ length: 3, default: \`current_timestamp(3)\` })
  updatedAt!: Date;

  @Index({ name: 'custom_idx_name_123' })
  @Property({ length: 255 })
  name!: string;

  @Index({ name: 'custom_email_index_name' })
  @Unique({ name: 'custom_email_unique_name' })
  @Property({ length: 255 })
  email!: string;

  @Property({ nullable: true })
  age?: number;

  @Index({ name: 'author2_terms_accepted_index' })
  @Property()
  termsAccepted: boolean = true;

  @Property({ nullable: true })
  optional?: boolean;

  @Property({ columnType: 'text[]', nullable: true })
  identities?: string[];

  @Index({ name: 'author2_born_index' })
  @Property({ columnType: 'date', nullable: true })
  born?: Date;

  @Index({ name: 'born_time_idx' })
  @Property({ columnType: 'time', nullable: true })
  bornTime?: Date;

  @ManyToOne({ entity: () => Book2, cascade: [Cascade.MERGE, Cascade.REMOVE], nullable: true })
  favouriteBook?: Book2;

  @ManyToOne({ entity: () => Author2, nullable: true })
  favouriteAuthor?: Author2;

}
",
  "import { Cascade, Entity, ManyToOne } from 'mikro-orm';
import { Author2 } from './Author2';

@Entity()
export class Author2Following {

  @ManyToOne({ entity: () => Author2, fieldName: 'author2_1_id', cascade: [Cascade.ALL], primary: true })
  author21!: Author2;

  @ManyToOne({ entity: () => Author2, fieldName: 'author2_2_id', cascade: [Cascade.ALL], primary: true })
  author22!: Author2;

}
",
  "import { Cascade, Entity, ManyToOne } from 'mikro-orm';
import { Author2 } from './Author2';

@Entity()
export class AuthorToFriend {

  @ManyToOne({ entity: () => Author2, fieldName: 'author2_1_id', cascade: [Cascade.ALL], primary: true })
  author21!: Author2;

  @ManyToOne({ entity: () => Author2, fieldName: 'author2_2_id', cascade: [Cascade.ALL], primary: true })
  author22!: Author2;

}
",
  "import { Cascade, Entity, ManyToOne, PrimaryKey, Property } from 'mikro-orm';
import { Author2 } from './Author2';
import { Publisher2 } from './Publisher2';

@Entity()
export class Book2 {

  @PrimaryKey({ length: 36 })
  uuidPk!: string;

  @Property({ length: 3, default: \`current_timestamp(3)\` })
  createdAt!: Date;

  @Property({ length: 255, nullable: true, default: \`''\` })
  title?: string;

  @Property({ columnType: 'text', nullable: true })
  perex?: string;

  @Property({ columnType: 'float8', nullable: true })
  price?: number;

  @Property({ columnType: 'numeric', nullable: true })
  double?: number;

  @Property({ nullable: true })
  meta?: object;

  @ManyToOne({ entity: () => Author2, cascade: [Cascade.MERGE] })
  author!: Author2;

  @ManyToOne({ entity: () => Publisher2, cascade: [Cascade.ALL], nullable: true })
  publisher?: Publisher2;

  @Property({ length: 255, nullable: true })
  foo?: string;

}
",
  "import { Cascade, Entity, ManyToOne, PrimaryKey } from 'mikro-orm';
import { Book2 } from './Book2';
import { BookTag2 } from './BookTag2';

@Entity()
export class Book2Tags {

  @PrimaryKey()
  order!: number;

  @ManyToOne({ entity: () => Book2, cascade: [Cascade.ALL] })
  book2!: Book2;

  @ManyToOne({ entity: () => BookTag2, cascade: [Cascade.ALL] })
  bookTag2!: BookTag2;

}
",
  "import { Entity, PrimaryKey, Property } from 'mikro-orm';

@Entity()
export class BookTag2 {

  @PrimaryKey({ columnType: 'int8' })
  id!: string;

  @Property({ length: 50 })
  name!: string;

}
",
  "import { Cascade, Entity, ManyToOne } from 'mikro-orm';
import { Book2 } from './Book2';
import { BookTag2 } from './BookTag2';

@Entity()
export class BookToTagUnordered {

  @ManyToOne({ entity: () => Book2, cascade: [Cascade.ALL], primary: true })
  book2!: Book2;

  @ManyToOne({ entity: () => BookTag2, cascade: [Cascade.ALL], primary: true })
  bookTag2!: BookTag2;

}
",
  "import { Entity, Index, ManyToOne, PrimaryKey, Property } from 'mikro-orm';
import { Test2 } from './Test2';

@Entity()
export class Configuration2 {

  @Index({ name: 'configuration2_property_index' })
  @PrimaryKey({ length: 255 })
  property!: string;

  @ManyToOne({ entity: () => Test2, primary: true, index: 'configuration2_test_id_index' })
  test!: Test2;

  @Property({ length: 255 })
  value!: string;

}
",
  "import { Entity, OneToOne, PrimaryKey, Property } from 'mikro-orm';
import { FooBaz2 } from './FooBaz2';

@Entity()
export class FooBar2 {

  @PrimaryKey()
  id!: number;

  @Property({ length: 255 })
  name!: string;

  @OneToOne({ entity: () => FooBaz2, nullable: true, unique: 'foo_bar2_baz_id_unique' })
  baz?: FooBaz2;

  @OneToOne({ entity: () => FooBar2, nullable: true, unique: 'foo_bar2_foo_bar_id_unique' })
  fooBar?: FooBar2;

  @Property({ default: \`current_timestamp(0)\` })
  version!: Date;

  @Property({ nullable: true })
  blob?: Buffer;

  @Property({ columnType: 'text[]', nullable: true })
  array?: string[];

  @Property({ nullable: true })
  object?: object;

}
",
  "import { Entity, PrimaryKey, Property } from 'mikro-orm';

@Entity()
export class FooBaz2 {

  @PrimaryKey()
  id!: number;

  @Property({ length: 255 })
  name!: string;

  @Property({ length: 3, default: \`current_timestamp(3)\` })
  version!: Date;

}
",
  "import { Entity, ManyToOne, Property } from 'mikro-orm';
import { FooBar2 } from './FooBar2';
import { FooBaz2 } from './FooBaz2';

@Entity()
export class FooParam2 {

  @ManyToOne({ entity: () => FooBar2, primary: true, index: 'foo_param2_bar_id_index' })
  bar!: FooBar2;

  @ManyToOne({ entity: () => FooBaz2, primary: true, index: 'foo_param2_baz_id_index' })
  baz!: FooBaz2;

  @Property({ length: 255 })
  value!: string;

}
",
  "import { Entity, PrimaryKey, Property } from 'mikro-orm';

@Entity()
export class Label2 {

  @PrimaryKey({ columnType: 'uuid' })
  uuid!: string;

  @Property({ length: 255 })
  name!: string;

}
",
  "import { Entity, PrimaryKey, Property } from 'mikro-orm';

@Entity()
export class Publisher2 {

  @PrimaryKey()
  id!: number;

  @Property({ length: 255 })
  name!: string;

  @Property({ columnType: 'text' })
  type!: string;

  @Property({ columnType: 'text' })
  type2!: string;

  @Property({ columnType: 'int2', nullable: true })
  enum1?: number;

  @Property({ columnType: 'int2', nullable: true })
  enum2?: number;

  @Property({ columnType: 'int2', nullable: true })
  enum3?: number;

  @Property({ columnType: 'text', nullable: true })
  enum4?: string;

}
",
  "import { Cascade, Entity, ManyToOne, PrimaryKey } from 'mikro-orm';
import { Publisher2 } from './Publisher2';
import { Test2 } from './Test2';

@Entity()
export class Publisher2Tests {

  @PrimaryKey()
  id!: number;

  @ManyToOne({ entity: () => Publisher2, cascade: [Cascade.ALL] })
  publisher2!: Publisher2;

  @ManyToOne({ entity: () => Test2, cascade: [Cascade.ALL] })
  test2!: Test2;

}
",
  "import { Cascade, Entity, OneToOne, PrimaryKey, Property } from 'mikro-orm';
import { Book2 } from './Book2';

@Entity()
export class Test2 {

  @PrimaryKey()
  id!: number;

  @Property({ length: 255, nullable: true })
  name?: string;

  @OneToOne({ entity: () => Book2, cascade: [Cascade.MERGE], nullable: true, unique: 'test2_book_uuid_pk_unique' })
  book?: Book2;

  @Property()
  version: number = 1;

  @Property({ columnType: 'polygon', nullable: true })
  path?: string;

}
",
]
`;

exports[`EntityGenerator generate entities from schema [sqlite]: sqlite-entity-dump 1`] = `
Array [
  "import { Entity, ManyToOne, PrimaryKey, Property, Unique } from 'mikro-orm';
import { Book3 } from './Book3';

@Entity()
export class Author3 {

  @PrimaryKey()
  id!: number;

  @Property({ nullable: true })
  createdAt?: Date;

  @Property({ nullable: true })
  updatedAt?: Date;

  @Property()
  name!: string;

  @Unique({ name: 'author3_email_unique' })
  @Property()
  email!: string;

  @Property({ nullable: true })
  age?: number;

  @Property()
  termsAccepted!: number;

  @Property({ nullable: true })
  identities?: string;

  @Property({ columnType: 'date', nullable: true })
  born?: string;

  @Property({ columnType: 'time', nullable: true })
  bornTime?: string;

  @ManyToOne({ entity: () => Book3, nullable: true, index: 'author3_favourite_book_id_index' })
  favouriteBook?: Book3;

}
",
  "import { Entity, ManyToOne, PrimaryKey, Property } from 'mikro-orm';
import { Author3 } from './Author3';
import { Publisher3 } from './Publisher3';

@Entity()
export class Book3 {

  @PrimaryKey()
  id!: number;

  @Property({ nullable: true })
  createdAt?: Date;

  @Property({ nullable: true })
  updatedAt?: Date;

  @Property({ default: \`''\` })
  title!: string;

  @Property({ nullable: true })
  foo?: string;

  @ManyToOne({ entity: () => Author3, nullable: true, index: 'book3_author_id_index' })
  author?: Author3;

  @ManyToOne({ entity: () => Publisher3, nullable: true, index: 'book3_publisher_id_index' })
  publisher?: Publisher3;

}
",
  "import { Cascade, Entity, ManyToOne, PrimaryKey } from 'mikro-orm';
import { Book3 } from './Book3';
import { BookTag3 } from './BookTag3';

@Entity()
export class Book3Tags {

  @PrimaryKey()
  id!: number;

  @ManyToOne({ entity: () => Book3, cascade: [Cascade.ALL], nullable: true, index: 'book3_tags_book3_id_index' })
  book3?: Book3;

  @ManyToOne({ entity: () => BookTag3, cascade: [Cascade.ALL], nullable: true, index: 'book3_tags_book_tag3_id_index' })
  bookTag3?: BookTag3;

}
",
  "import { Entity, PrimaryKey, Property } from 'mikro-orm';

@Entity()
export class BookTag3 {

  @PrimaryKey()
  id!: number;

  @Property()
  name!: string;

  @Property({ default: \`current_timestamp\` })
  version!: Date;

}
",
  "import { Entity, PrimaryKey, Property } from 'mikro-orm';

@Entity()
export class Publisher3 {

  @PrimaryKey()
  id!: number;

  @Property()
  name!: string;

  @Property()
  type!: string;

}
",
  "import { Cascade, Entity, ManyToOne, PrimaryKey } from 'mikro-orm';
import { Publisher3 } from './Publisher3';
import { Test3 } from './Test3';

@Entity()
export class Publisher3Tests {

  @PrimaryKey()
  id!: number;

  @ManyToOne({ entity: () => Publisher3, cascade: [Cascade.ALL], nullable: true, index: 'publisher3_tests_publisher3_id_index' })
  publisher3?: Publisher3;

  @ManyToOne({ entity: () => Test3, cascade: [Cascade.ALL], nullable: true, index: 'publisher3_tests_test3_id_index' })
  test3?: Test3;

}
",
  "import { Entity, PrimaryKey, Property } from 'mikro-orm';

@Entity()
export class Test3 {

  @PrimaryKey()
  id!: number;

  @Property({ nullable: true })
  name?: string;

  @Property()
  version: number = 1;

}
",
]
`;
